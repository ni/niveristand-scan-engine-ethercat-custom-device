parameters:
  - name: releaseVersion
    type: string
  - name: quarterlyReleaseVersion
    type: string
  - name: lvVersions
    type: object
  - name: archiveLocation
    type: string
  - name: packages
    type: object

steps:
  - checkout: self
    displayName: Check out repository to build

  - ${{ each lvVersion in parameters.lvVersions }}:
    - task: PowerShell@2
      displayName: Set up variables for custom packaging steps
      inputs:
        targetType: 'inline'
        script: |
          $customDeviceRepoName = '$(Build.Repository.Name)' -replace '.+\/', ''
          Write-Host "##vso[task.setvariable variable=customDeviceRepoName]$customDeviceRepoName"
          Write-Host "##vso[task.setvariable variable=nipkgPath]$customDeviceRepoName\nipkg"
          Write-Output 'Configuring release version to "${{ parameters.releaseVersion }}" and quarterlyReleaseVersion to "${{ parameters.quarterlyReleaseVersion }}"...'
          Write-Host '##vso[task.setvariable variable=releaseVersion]${{ parameters.releaseVersion }}'
          Write-Host '##vso[task.setvariable variable=quarterlyReleaseVersion]${{ parameters.quarterlyReleaseVersion }}'
          Write-Host '##vso[task.setvariable variable=lvVersion]${{ lvVersion }}'
          If ('${{ lvVersion }}' -eq '2020')
          {
            Write-Host '##vso[task.setvariable variable=shortLvVersion]20'
            Write-Host '##vso[task.setvariable variable=nipkgx64suffix]'
          }
          Elseif ('${{ lvVersion }}' -eq '2021')
          {
            Write-Host '##vso[task.setvariable variable=shortLvVersion]21'
            Write-Host '##vso[task.setvariable variable=nipkgx64suffix]64'
          }
          Elseif ('${{ lvVersion }}' -eq '2023')
          {
            Write-Host '##vso[task.setvariable variable=shortLvVersion]23'
            Write-Host '##vso[task.setvariable variable=nipkgx64suffix]64'
          }
          Else
          {
            Write-Error "Invalid LabVIEW version defined in pipeline: ${{ lvVersion }}.  Use either 2020, 2021, or 2023."
          }
          If ('$(Build.Reason)' -eq 'PullRequest')
          {
            $sourceBranch = "$(System.PullRequest.SourceBranch)" -replace 'dev/', ''
          }
          Else
          {
            $sourceBranch = "$(Build.SourceBranchName)"
          }
          Write-Host "##vso[task.setvariable variable=archivePath]${{ parameters.archiveLocation }}\NI\export\$sourceBranch\"

    - ${{ each package in parameters.packages }}:
      - ${{ if ne(package.controlFileName, '') }}:
        - task: PowerShell@2
          displayName: Stage nipkg directory
          inputs:
            targetType: 'inline'
            script: |
              Write-Output "setting up nipkg directory..."
              If (Test-Path '$(nipkgPath)')
              {
                Remove-Item -Path '$(nipkgPath)' -Recurse -Force
              }
              New-Item -Path '$(nipkgPath)' -ItemType 'Directory'
              New-Item -Path '$(nipkgPath)' -Name 'control' -ItemType 'Directory'
              New-Item -Path '$(nipkgPath)' -Name 'data' -ItemType 'Directory'
              New-Item -Path '$(nipkgPath)' -Name 'debian-binary' -ItemType 'File'
              Set-Content '$(nipkgPath)\debian-binary' '2.0\n'
              Copy-Item `
                -Path '$(customDeviceRepoName)\${{ package.controlFileName }}' `
                -Destination '$(nipkgPath)\control\control'
              `
              Write-Output "updating nipkg control version parameters..."
              $contents = (Get-Content -Path '$(nipkgPath)\control\control')`
                -replace '{veristand_version}', '$(lvVersion)'`
                -replace '{labview_version}', '$(lvVersion)'`
                -replace '{nipkg_version}', '$(releaseVersion)'`
                -replace '{display_version}', '$(releaseVersion)'`
                -replace '{quarterly_display_version}', '$(quarterlyReleaseVersion)'`
                -replace '{labview_short_version}', '$(shortLvVersion)'
              Write-Output $contents
              Set-Content -Value $contents -Path '$(nipkgPath)\control\control'

        - ${{ each payloadMap in package.payloadMaps }}:
          - task: PowerShell@2
            displayName: Copying payload ${{ payloadMap.payloadLocation }} to install location
            inputs:
              targetType: 'inline'
              script: |
                New-Item -Path '$(nipkgPath)\data\${{ payloadMap.installLocation }}' -ItemType 'Directory'
                If (Test-Path "$(archivePath)\$(Build.BuildNumber)\$(lvVersion)\x86\${{ payloadMap.payloadLocation }}")
                {
                  $payloadArchiveLocation = "$(archivePath)\$(Build.BuildNumber)\$(lvVersion)\x86\${{ payloadMap.payloadLocation }}"
                }
                Elseif (Test-Path "$(archivePath)\$(Build.BuildNumber)\$(lvVersion)\x64\${{ payloadMap.payloadLocation }}")
                {
                  $payloadArchiveLocation = "$(archivePath)\$(Build.BuildNumber)\$(lvVersion)\x64\${{ payloadMap.payloadLocation }}"
                }
                Else
                {
                  Write-Error "Archived payload is not found for either bitness"
                }
                Copy-Item `
                  -Path '$(archivePath)\$(Build.BuildNumber)\$(lvVersion)\x64\${{ payloadMap.payloadLocation }}\*' `
                  -Destination '$(nipkgPath)\data\${{ payloadMap.installLocation }}'

        - task: CmdLine@2
          displayName: Pack nipkg
          inputs:
            script: '"%PROGRAMFILES%\National Instruments\NI Package Manager\nipkg.exe" pack "$(nipkgPath)" "$(nipkgPath)"'

        - task: PowerShell@2
          displayName: Copy installer to build output location
          inputs:
            targetType: 'inline'
            script: |
              $installerPath = '$(archivePath)\$(Build.BuildNumber)\$(lvVersion)\installer'
              If (-not(Test-Path $installerPath))
              {
                New-Item -Path $installerPath -ItemType 'Directory'
              }
              Copy-Item `
                -Path '$(nipkgPath)\*' `
                -Destination $installerPath `
                -Include *.nipkg `
                -Recurse
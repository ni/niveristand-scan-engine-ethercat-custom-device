parameters:
  - name: releaseVersion
    type: string
  - name: lvVersions
    type: object
  - name: archiveLocation
    type: string
  - name: packages
    type: object

steps:
  - checkout: self
    displayName: Check out repository to build

  - ${{ each lvVersion in parameters.lvVersions }}:
    - task: PowerShell@2
      displayName: Set up variables for custom packaging steps
      inputs:
        targetType: 'inline'
        script: |
          If ('$(Build.Reason)' -eq 'PullRequest')
          {
            Write-Output "Setting variables for Pull Requests..."
            $sourceBranch = "$(System.PullRequest.SourceBranch)"
            Write-Output "Source branch $(System.PullRequest.SourceBranch)"
          }
          Else
          {
            Write-Output "Setting variables for general builds..."
            $sourceBranch = "$(Build.SourceBranch)" -replace 'refs/heads/', ''
            Write-Output "Source branch $(Build.SourceBranch), removed refs/heads/"
          }
          Write-Output "Using $sourceBranch in archive path..."
          Write-Host "##vso[task.setvariable variable=sourceBranch]$sourceBranch"
          Write-Output 'Determining quarterlyReleaseVersion...'
          $releaseData = "${{ parameters.releaseVersion }}" -Split "\."
          If ($releaseData[1] -eq "0")
          {
            $derivedQuarterlyReleaseVersion = "20$($releaseData[0]) Q1"
          }
          If ($releaseData[1] -eq "3")
          {
          $derivedQuarterlyReleaseVersion = "20$($releaseData[0]) Q2"
          }
          If ($releaseData[1] -eq "5")
          {
            $derivedQuarterlyReleaseVersion = "20$($releaseData[0]) Q3"
          }
          If ($releaseData[1] -eq "8")
          {
            $derivedQuarterlyReleaseVersion = "20$($releaseData[0]) Q4"
          }
          Write-Output "Configuring release version to ${{ parameters.releaseVersion }} and quarterlyReleaseVersion to $($derivedQuarterlyReleaseVersion)..."
          Write-Host "##vso[task.setvariable variable=releaseVersion]${{ parameters.releaseVersion }}"
          Write-Host "##vso[task.setvariable variable=quarterlyReleaseVersion]$derivedQuarterlyReleaseVersion"
          Write-Host '##vso[task.setvariable variable=lvVersion]${{ lvVersion }}'
          If ('${{ lvVersion }}' -eq '2020')
          {
            Write-Host '##vso[task.setvariable variable=shortLvVersion]20'
            Write-Host '##vso[task.setvariable variable=nipkgx64suffix]'
          }
          Elseif ('${{ lvVersion }}' -eq '2021')
          {
            Write-Host '##vso[task.setvariable variable=shortLvVersion]21'
            Write-Host '##vso[task.setvariable variable=nipkgx64suffix]64'
          }
          Elseif ('${{ lvVersion }}' -eq '2023')
          {
            Write-Host '##vso[task.setvariable variable=shortLvVersion]23'
            Write-Host '##vso[task.setvariable variable=nipkgx64suffix]64'
          }
          Else
          {
            Write-Error "Invalid LabVIEW version defined in pipeline: ${{ lvVersion }}.  Use either 2020, 2021, or 2023."
          }
          Write-Host "##vso[task.setvariable variable=archivePath]${{ parameters.archiveLocation }}\NI\export\$sourceBranch\"

    - ${{ each package in parameters.packages }}:
      - ${{ if ne(package.controlFileName, '') }}:
        - task: PowerShell@2
          displayName: Stage nipkg directory
          inputs:
            targetType: 'inline'
            script: |
              Write-Output "setting up nipkg directory..."
              If (Test-Path 'nipkg')
              {
                Remove-Item -Path 'nipkg' -Recurse -Force
              }
              New-Item -Path 'nipkg' -ItemType 'Directory'
              New-Item -Path 'nipkg' -Name 'control' -ItemType 'Directory'
              New-Item -Path 'nipkg' -Name 'data' -ItemType 'Directory'
              New-Item -Path 'nipkg' -Name 'debian-binary' -ItemType 'File'
              Set-Content 'nipkg\debian-binary' '2.0\n'
              Copy-Item `
                -Path '${{ package.controlFileName }}' `
                -Destination 'nipkg\control\control'
              `
              Write-Output "updating nipkg control version parameters..."
              $contents = (Get-Content -Path "nipkg\control\control") `
                -replace "{veristand_version}", "$(lvVersion)" `
                -replace "{labview_version}", "$(lvVersion)" `
                -replace "{nipkg_version}", "$(releaseVersion).$env:BUILDCOUNTER" `
                -replace "{display_version}", "$(releaseVersion)" `
                -replace "{quarterly_display_version}", "$(quarterlyReleaseVersion)" `
                -replace "{labview_short_version}", "$(shortLvVersion)" `
                -replace "{nipkgx64suffix}", "$(nipkgx64suffix)"
              Write-Output $contents
              Set-Content -Value $contents -Path 'nipkg\control\control'

        - ${{ each payloadMap in package.payloadMaps }}:
          - task: PowerShell@2
            displayName: Copying payload ${{ payloadMap.payloadLocation }} to install location
            inputs:
              targetType: 'inline'
              script: |
                New-Item -Path 'nipkg\data\${{ payloadMap.installLocation }}' -ItemType 'Directory'
                Copy-Item `
                  -Path '$(archivePath)\$(Build.BuildNumber)\$(lvVersion)\x86\${{ payloadMap.payloadLocation }}\*' `
                  -Destination 'nipkg\data\${{ payloadMap.installLocation }}' `
                  -Recurse
                Copy-Item `
                  -Path '$(archivePath)\$(Build.BuildNumber)\$(lvVersion)\x64\${{ payloadMap.payloadLocation }}\*' `
                  -Destination 'nipkg\data\${{ payloadMap.installLocation }}' `
                  -Recurse

        - task: CmdLine@2
          displayName: Pack nipkg
          inputs:
            script: '"%PROGRAMFILES%\National Instruments\NI Package Manager\nipkg.exe" pack "nipkg" "nipkg"'

        - task: PowerShell@2
          displayName: Copy installer to build output location
          inputs:
            targetType: 'inline'
            script: |
              $installerPath = '$(archivePath)\$(Build.BuildNumber)\$(lvVersion)\installer'
              If (-not(Test-Path $installerPath))
              {
                New-Item -Path $installerPath -ItemType 'Directory'
              }
              Copy-Item `
                -Path 'nipkg\*' `
                -Destination $installerPath `
                -Include *.nipkg `
                -Recurse

  - task: PowerShell@2
    displayName: Rename nipkg files to match branch type
    inputs:
      targetType: 'inline'
      script: |
        If (-not("$(sourceBranch)" -match "release"))
        {
          $cleanedSourceBranch = "$(sourceBranch)" -replace "\/", "_"
          Write-Output "Not a release branch, so appending branch name $cleanedSourceBranch to nipkg files..."
          $packages = Get-ChildItem `
            -Path "$(archivePath)\$(Build.BuildNumber)\*\installer\*.nipkg"
          Foreach ($package in $packages)
          {
            If (-not("$package" -match "$cleanedSourceBranch.nipkg"))
            {
              Rename-Item -Path "$package" -NewName ("$package" -replace ".nipkg", "_$cleanedSourceBranch.nipkg")
            }
          }
        }